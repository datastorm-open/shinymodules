% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_data.R
\name{filter_dataUI}
\alias{filter_dataUI}
\alias{filter_data}
\title{UI part of the module filter_data}
\usage{
filter_dataUI(id, titles = TRUE)

filter_data(input, output, session, data = NULL,
  columns_to_filter = "all", default_multisel_n = 10)
}
\arguments{
\item{id}{\code{character} An id that will be used to create a namespace}

\item{titles}{\code{logical} Add titles on UI ? Default to TRUE}

\item{input}{Not a real parameter, should not be set manually. 
Done by callModule automatically.}

\item{output}{Not a real parameter, should not be set manually. 
Done by callModule automatically.}

\item{session}{Not a real parameter, should not be set manually. 
Done by callModule automatically.}

\item{data}{\code{reactivevalues} reactive data.table}

\item{columns_to_filter}{\code{character} vector o column names you want to 
allow the user to filter (default is all)}

\item{default_multisel_n}{\code{integer} How many choices are selected by default in case of multiple selection.}
}
\value{
UI page
}
\description{
This function has to be set in the UI part of a shiny 
application. filter_data is a module used to filter a given data.table on 
chosen columns by the user. The server part returns a reactive value containing
the filtered data.table
}
\examples{
\dontrun{

ui = shiny::fluidPage(filter_dataUI(id = "id", titles = TRUE))
server = function(input, output, session) {
  data <- reactiveValues(data = iris)
  shiny::callModule(module = filter_data, id = "id", data = reactive(data$data))
}

shiny::shinyApp(ui = ui, server = server)

## Example apps
run_example_app_show_data()
run_example_app_filter_and_show_data()
} 

}
