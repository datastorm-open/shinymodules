% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/show_data.R
\name{show_dataUI}
\alias{show_dataUI}
\alias{show_data}
\title{UI part of the module show_data}
\usage{
show_dataUI(id, titles = TRUE, subtitles = TRUE)

show_data(input, output, session, data = NULL, optional_stats = "all",
  nb_modal2show = 3, columns_to_show = "all", show_warnings = FALSE)
}
\arguments{
\item{id}{\code{character} An id that will be used to create a namespace
It returns three tables, one with statistics on numeric data, one with 
statistics on factor data and one with statistics on dates data}

\item{titles}{\code{logical} Add titles on UI ? Default to TRUE}

\item{subtitles}{\code{logical} Add subtitles on UI ? Default to TRUE}

\item{input}{Not a real parameter, should not be set manually. 
Done by callModule automatically.}

\item{output}{Not a real parameter, should not be set manually. 
Done by callModule automatically.}

\item{session}{Not a real parameter, should not be set manually. 
Done by callModule automatically.}

\item{data}{\code{reactivevalues} reactive data.table}

\item{optional_stats}{\code{character} optional statistics computed on numeric
data, default is "all". "pct_zero", "pct_NA", "mean", "median", "sd" are
always computed, possible values are "min", "max", "nb_valid", "var", "interquartile_range",
"mode_max", "kurtosis", "skewness", "boxplot", "density".}

\item{nb_modal2show}{\code{integer} number of modalities to show 
for factor variables.}

\item{columns_to_show}{\code{character} vector of column names you want to be
shown in the tables}

\item{show_warnings}{\code{logical} Show warnings ? (example compute Min. on all NAs)}
}
\value{
shiny module
}
\description{
Shiny module to show descripive statistics on data
}
\examples{

\dontrun{

ui = shiny::fluidPage(show_dataUI(id = "id", titles = TRUE))
server = function(input, output, session) {
  data <- reactiveValues(data = iris)
  shiny::callModule(module = show_data, id = "id", data = reactive(data$data),
    optional_stats = "all")
}

shiny::shinyApp(ui = ui, server = server)
     
## filter on stats 
ui = shiny::fluidPage(show_dataUI(id = "id", titles = TRUE))
server = function(input, output, session) {
  data <- reactiveValues(data = iris)
  
  shiny::callModule(module = show_data, id = "id", data = reactive(data$data),
    optional_stats = c("kurtosis", "density"),
    columns_to_show = c("Species", "Petal.Width", "Sepal.Width"))
}

shiny::shinyApp(ui = ui, server = server)   
             
## Examples apps
run_example_app_show_data()
run_example_app_filter_and_show_data()
}

}
\seealso{
\code{\link{filter_data}}
}
